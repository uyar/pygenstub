# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT MANUALLY.

from typing import Dict, List, Optional, Set, Tuple, Union
from argparse import ArgumentParser
from pathlib import Path
import ast

ParsedParameter = Tuple[str, str, bool]
FunctionDef = Union[ast.FunctionDef, ast.AsyncFunctionDef]

__version__: str

def _split_types(decl: str) -> List[str]: ...
def parse_signature(signature: str) -> Tuple[Optional[List[str]], str, Set[str]]: ...

class StubNode:
    name: str
    parent: Optional[StubNode]
    children: List[StubNode]
    def __init__(self, name: str) -> None: ...
    def add_child(self, node: StubNode) -> None: ...
    def print_stub(self, indent: str = ...) -> None: ...

class VariableNode(StubNode):
    type_: str
    def __init__(self, name: str, type_: str) -> None: ...
    def print_stub(self, indent: str = ...) -> None: ...

class FunctionNode(StubNode):
    async_: bool
    parameters: List[ParsedParameter]
    rtype: str
    decorators: List[str]
    def __init__(
        self,
        name: str,
        parameters: List[ParsedParameter],
        rtype: str,
        *,
        decorators: Optional[List[str]] = ...
    ) -> None: ...
    def print_stub(self, indent: str = ...) -> None: ...

class ClassNode(StubNode):
    bases: List[str]
    signature: Optional[str]
    def __init__(
        self, name: str, *, bases: List[str], signature: Optional[str] = ...
    ) -> None: ...
    def print_stub(self, indent: str = ...) -> None: ...

def _get_args(node: FunctionDef) -> List[Tuple[Tuple[int, int], str]]: ...
def _print_import_from(mod: str, names: Set[str], *, indent: str = ...) -> None: ...

class StubGenerator(ast.NodeVisitor):
    root: StubNode
    generic: bool
    imported_namespaces: Dict[str, str]
    imported_names: Dict[str, str]
    defined_types: Set[str]
    required_types: Set[str]
    _parents: List[StubNode]
    _code_lines: List[str]
    aliases: Dict[str, str]
    signatures: Dict[str, str]
    def __init__(self, source: str, *, generic: bool = ...) -> None: ...
    def collect_aliases(self) -> None: ...
    def collect_signatures(self) -> None: ...
    def get_function_node(self, node: FunctionDef) -> Optional[FunctionNode]: ...
    def analyze_types(self) -> Dict[str, Set[str]]: ...
    def print_stub(self) -> None: ...

def get_stub(source: str, *, generic: bool = ...) -> str: ...
def get_mod_paths(mod_name: str) -> Optional[Tuple[Path, Path]]: ...
def get_pkg_paths(pkg_name: str) -> List[Tuple[Path, Path]]: ...
def _make_parser(prog: str) -> ArgumentParser: ...
def _collect_sources(files: List[str], modules: List[str]) -> List[Tuple[Path, Path]]: ...
def run(argv: Optional[List[str]] = ...) -> None: ...
